package com.wf.charpter11.bjsxt;

/**
 * @Author: wangfa
 * @Date: 2019/5/12 15:53
 * @Description: 组合模式 composite
 *
 * 场景：
 *  把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式处理部分对象和整体对象
 *
 *
 * 核心:
 * 抽象构件角色(component)：定义了叶子和容器构件的共同点
 * 叶子构件角色(Leaf): 子节点
 * 容器构件角色(Composite):有容器特征，可以包含子节点(父节点)
 *
 *
 * 组合模式为处理树形结构提供了完美的解决方案，描述了如何将容器和叶子节点进行递归组合，使用户在使用时可以一致性的对待容器和叶子。
 * 当容器对象的指定方法被调用时，将遍历整个树形结构，寻找也包含这个方法的成员，并调用执行，其中，使用了递归调用的机制对整个结构进行处理、
 *
 *
 * 应用场景：
 *  操作系统资源管理
 *      XML 文件解析
 *
 *      Junit 单元测试框架 底层设计就是组合模式 TestCase(叶子) TestUnite(容器) Test(抽象)
 */
public class Client {
}
