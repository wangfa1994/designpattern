package com.wf.charpter21.bjsxt;

/**
 * @Author: wangfa
 * @Date: 2019/5/12 15:53
 * @Description: 代理模式 proxy pattern
 *
 *
 * 核心作用
 *      通过代理，控制对对象的访问
 *      可以详细控制访问某个(某类)对象的方法，在调用这个方法前做前置处理，调用这个方法后做后置处理(AOP的微观实现)
 *      AOP(面向切面编程)的核心实现机制
 *
 *      我们需要把我们的需求告诉代理
 *
 *      核心角色：
 *          抽象角色:定义代理角色和真实角色的公共对外方法
 *          代理角色:实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加我们代理角色自己的操作
 *          真实角色:实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用，我们真正的业务逻辑
 *      将统一的流程控制放到代理角色中处理。
 *
 *      应用场景：
 *          安全代理: 屏蔽对真实角色的直接访问
 *          远程代理: 通过代理类处理远程方法调用(RMI)
 *          延迟加载:
 *      分类:
 *          静态代理:静态定义代理类
 *          动态代理：JDK自带的动态处理 CGLIB （javaassist字节码操作库实现/ASM(顶层使用指令，可维护性较差)）
 *
 *      应用场景：
 *          数据库连接池关闭处理
 *          mybatis中实现拦截器插件
 *          Aspect的实现
 *          spring中AOP实现:日志拦截 声明式事务处理
 *          web service
 *          RMI 远程方法调用
 *
 *
 *          AOP 可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。
 *
 *
 */
public class Client {
}
